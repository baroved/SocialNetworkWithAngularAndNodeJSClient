import { VERSION, SecurityContext, Pipe, NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TrustHtmlPipe = /** @class */ (function () {
    function TrustHtmlPipe(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @param {?} htmlString
     * @return {?}
     */
    TrustHtmlPipe.prototype.transform = /**
     * @param {?} htmlString
     * @return {?}
     */
    function (htmlString) {
        /** @type {?} */
        var result;
        if (!VERSION || VERSION.major === '2') {
            result = this.sanitizer.bypassSecurityTrustHtml(htmlString);
        }
        else {
            result = this.sanitizer.sanitize(SecurityContext.HTML, htmlString);
        }
        return result;
    };
    TrustHtmlPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'trustHtml'
                },] }
    ];
    /** @nocollapse */
    TrustHtmlPipe.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    return TrustHtmlPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TrustHtmlModule = /** @class */ (function () {
    function TrustHtmlModule() {
    }
    TrustHtmlModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [TrustHtmlPipe],
                    imports: [],
                    exports: [TrustHtmlPipe]
                },] }
    ];
    return TrustHtmlModule;
}());

export { TrustHtmlModule, TrustHtmlPipe };
//# sourceMappingURL=trust-html.js.map
