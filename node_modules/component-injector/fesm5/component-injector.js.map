{"version":3,"file":"component-injector.js","sources":["ng://component-injector/lib/component-injector.ts","ng://component-injector/lib/component-injector.module.ts"],"sourcesContent":["import {\n  Component,\n  ComponentFactory,\n  ComponentFactoryResolver, ComponentRef,\n  Injectable,\n  Type,\n  ViewContainerRef\n} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComponentInjector {\n  public static entryComponentsFactories: ComponentFactory<any>[] = [];\n\n\n  constructor(private resolver: ComponentFactoryResolver) {\n\n  }\n\n  public setComponentFactories(componentsList: Type<Component>[]): void {\n    if (componentsList) {\n      componentsList.forEach((component: Type<Component>) => {\n        let factory = this.resolver.resolveComponentFactory(component);\n        if (factory) {\n          ComponentInjector.entryComponentsFactories.push(factory);\n        }\n      });\n    }\n  }\n\n  inject(container: ViewContainerRef, componentSelector: string): ComponentRef<any> | null {\n    let componentFactory: ComponentFactory<any> = this.getComponentFactory(componentSelector);\n    if (componentFactory) {\n      return this.injectComponentFactory(container, componentFactory);\n    }\n    else {\n      console.warn('Component [' + componentSelector + '] cannot be found! ' +\n        'Make sure it is included in the `entryComponents` list.');\n    }\n\n    return null;\n  }\n\n  setProperties(componentRef: ComponentRef<any>, properties: any): void {\n    if (componentRef) {\n      for (let property in properties) {\n        if (properties.hasOwnProperty(property)) {\n          componentRef.instance[property] = properties[property];\n        }\n      }\n    }\n  }\n\n  remove(componentRef: ComponentRef<any> | null): void {\n    if (componentRef) {\n      componentRef.destroy();\n    }\n    componentRef = null;\n  }\n\n  protected getComponentFactory(componentSelector: string): ComponentFactory<any> {\n    let factories = ComponentInjector.entryComponentsFactories;\n    let componentFactory: any = factories.find((component: any) => {\n      return component.selector === componentSelector;\n    });\n\n    return componentFactory ? componentFactory : null;\n  }\n\n  protected injectComponentFactory(container: ViewContainerRef, componentFactory: ComponentFactory<any>): ComponentRef<any> {\n    return container.createComponent(componentFactory);\n  }\n}\n","import { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: []\n})\nexport class ComponentInjectorModule { }\n"],"names":[],"mappings":";;;;;;AAAA;IAgBE,2BAAoB,QAAkC;QAAlC,aAAQ,GAAR,QAAQ,CAA0B;KAErD;;;;;IAEM,iDAAqB;;;;IAA5B,UAA6B,cAAiC;QAA9D,iBASC;QARC,IAAI,cAAc,EAAE;YAClB,cAAc,CAAC,OAAO;;;;YAAC,UAAC,SAA0B;;oBAC5C,OAAO,GAAG,KAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC,SAAS,CAAC;gBAC9D,IAAI,OAAO,EAAE;oBACX,iBAAiB,CAAC,wBAAwB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAC1D;aACF,EAAC,CAAC;SACJ;KACF;;;;;;IAED,kCAAM;;;;;IAAN,UAAO,SAA2B,EAAE,iBAAyB;;YACvD,gBAAgB,GAA0B,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,CAAC;QACzF,IAAI,gBAAgB,EAAE;YACpB,OAAO,IAAI,CAAC,sBAAsB,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;SACjE;aACI;YACH,OAAO,CAAC,IAAI,CAAC,aAAa,GAAG,iBAAiB,GAAG,qBAAqB;gBACpE,yDAAyD,CAAC,CAAC;SAC9D;QAED,OAAO,IAAI,CAAC;KACb;;;;;;IAED,yCAAa;;;;;IAAb,UAAc,YAA+B,EAAE,UAAe;QAC5D,IAAI,YAAY,EAAE;YAChB,KAAK,IAAI,QAAQ,IAAI,UAAU,EAAE;gBAC/B,IAAI,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;oBACvC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;iBACxD;aACF;SACF;KACF;;;;;IAED,kCAAM;;;;IAAN,UAAO,YAAsC;QAC3C,IAAI,YAAY,EAAE;YAChB,YAAY,CAAC,OAAO,EAAE,CAAC;SACxB;QACD,YAAY,GAAG,IAAI,CAAC;KACrB;;;;;;IAES,+CAAmB;;;;;IAA7B,UAA8B,iBAAyB;;YACjD,SAAS,GAAG,iBAAiB,CAAC,wBAAwB;;YACtD,gBAAgB,GAAQ,SAAS,CAAC,IAAI;;;;QAAC,UAAC,SAAc;YACxD,OAAO,SAAS,CAAC,QAAQ,KAAK,iBAAiB,CAAC;SACjD,EAAC;QAEF,OAAO,gBAAgB,GAAG,gBAAgB,GAAG,IAAI,CAAC;KACnD;;;;;;;IAES,kDAAsB;;;;;;IAAhC,UAAiC,SAA2B,EAAE,gBAAuC;QACnG,OAAO,SAAS,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;KACpD;IA3Da,0CAAwB,GAA4B,EAAE,CAAC;;gBAJtE,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;gBARC,wBAAwB;;;4BAH1B;CASA;;;;;;ACTA;IAEA;KAKwC;;gBALvC,QAAQ,SAAC;oBACR,YAAY,EAAE,EAAE;oBAChB,OAAO,EAAE,EAAE;oBACX,OAAO,EAAE,EAAE;iBACZ;;IACsC,8BAAC;CALxC;;;;"}