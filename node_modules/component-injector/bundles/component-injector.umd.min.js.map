{"version":3,"sources":["ng://component-injector/lib/component-injector.ts","ng://component-injector/lib/component-injector.module.ts"],"names":["ComponentInjector","resolver","this","prototype","setComponentFactories","componentsList","_this","forEach","component","factory","resolveComponentFactory","entryComponentsFactories","push","inject","container","componentSelector","componentFactory","getComponentFactory","injectComponentFactory","console","warn","setProperties","componentRef","properties","property","hasOwnProperty","instance","remove","destroy","find","selector","createComponent","Injectable","args","providedIn","ComponentFactoryResolver","ComponentInjectorModule","NgModule","declarations","imports","exports"],"mappings":"4RAAA,IAAAA,EAAA,WAgBE,SAAAA,EAAoBC,GAAAC,KAAAD,SAAAA,SAIbD,EAAAG,UAAAC,sBAAP,SAA6BC,GAA7B,IAAAC,EAAAJ,KACMG,GACFA,EAAeE,QAAO,SAAEC,OAClBC,EAAUH,EAAKL,SAASS,wBAAwBF,GAChDC,GACFT,EAAkBW,yBAAyBC,KAAKH,MAMxDT,EAAAG,UAAAU,OAAA,SAAOC,EAA6BC,OAC9BC,EAA0Cd,KAAKe,oBAAoBF,GACvE,OAAIC,EACKd,KAAKgB,uBAAuBJ,EAAWE,IAG9CG,QAAQC,KAAK,cAAgBL,EAAoB,8EAI5C,OAGTf,EAAAG,UAAAkB,cAAA,SAAcC,EAAiCC,GAC7C,GAAID,EACF,IAAK,IAAIE,KAAYD,EACfA,EAAWE,eAAeD,KAC5BF,EAAaI,SAASF,GAAYD,EAAWC,KAMrDxB,EAAAG,UAAAwB,OAAA,SAAOL,GACDA,GACFA,EAAaM,UAEfN,EAAe,MAGPtB,EAAAG,UAAAc,oBAAV,SAA8BF,OAExBC,EADYhB,EAAkBW,yBACIkB,KAAI,SAAErB,GAC1C,OAAOA,EAAUsB,WAAaf,IAGhC,OAAOC,GAAsC,MAGrChB,EAAAG,UAAAe,uBAAV,SAAiCJ,EAA6BE,GAC5D,OAAOF,EAAUiB,gBAAgBf,IA1DrBhB,EAAAW,yBAAoD,uBAJnEqB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAPZC,EAAAA,2KAHF,GCAAC,EAAA,WAEA,SAAAA,KAKuC,2BALtCC,EAAAA,SAAQJ,KAAA,CAAC,CACRK,aAAc,GACdC,QAAS,GACTC,QAAS,OAE4BJ,EAPvC","sourcesContent":["import {\n  Component,\n  ComponentFactory,\n  ComponentFactoryResolver, ComponentRef,\n  Injectable,\n  Type,\n  ViewContainerRef\n} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComponentInjector {\n  public static entryComponentsFactories: ComponentFactory<any>[] = [];\n\n\n  constructor(private resolver: ComponentFactoryResolver) {\n\n  }\n\n  public setComponentFactories(componentsList: Type<Component>[]): void {\n    if (componentsList) {\n      componentsList.forEach((component: Type<Component>) => {\n        let factory = this.resolver.resolveComponentFactory(component);\n        if (factory) {\n          ComponentInjector.entryComponentsFactories.push(factory);\n        }\n      });\n    }\n  }\n\n  inject(container: ViewContainerRef, componentSelector: string): ComponentRef<any> | null {\n    let componentFactory: ComponentFactory<any> = this.getComponentFactory(componentSelector);\n    if (componentFactory) {\n      return this.injectComponentFactory(container, componentFactory);\n    }\n    else {\n      console.warn('Component [' + componentSelector + '] cannot be found! ' +\n        'Make sure it is included in the `entryComponents` list.');\n    }\n\n    return null;\n  }\n\n  setProperties(componentRef: ComponentRef<any>, properties: any): void {\n    if (componentRef) {\n      for (let property in properties) {\n        if (properties.hasOwnProperty(property)) {\n          componentRef.instance[property] = properties[property];\n        }\n      }\n    }\n  }\n\n  remove(componentRef: ComponentRef<any> | null): void {\n    if (componentRef) {\n      componentRef.destroy();\n    }\n    componentRef = null;\n  }\n\n  protected getComponentFactory(componentSelector: string): ComponentFactory<any> {\n    let factories = ComponentInjector.entryComponentsFactories;\n    let componentFactory: any = factories.find((component: any) => {\n      return component.selector === componentSelector;\n    });\n\n    return componentFactory ? componentFactory : null;\n  }\n\n  protected injectComponentFactory(container: ViewContainerRef, componentFactory: ComponentFactory<any>): ComponentRef<any> {\n    return container.createComponent(componentFactory);\n  }\n}\n","import { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: []\n})\nexport class ComponentInjectorModule { }\n"]}